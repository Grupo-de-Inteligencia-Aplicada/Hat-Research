---
import Layout from "../layouts/Layout.astro";
---

<script>
  import * as Blockly from "blockly";
  import { EditorView, basicSetup } from "codemirror";
  import { setupBlockly } from "../blocks/index";
  import generateToolbox from "../blocks/toolbox";
  import { HatApi, type ApiError } from "../services/api";
  import { javascriptGenerator } from "blockly/javascript";
  import "@blockly/field-colour-hsv-sliders";
  import "@blockly/field-slider";

  const lastState = window.localStorage.getItem("workspace");

  async function setup() {
    const hatApi = new HatApi("http://localhost:5000");
    const devices = await hatApi.listDevices();
    const possibleEvents = await hatApi.listPossibleEvents();
    const workspace = setupBlockly(devices, possibleEvents);

    function getWorkspaceState() {
      const dom = Blockly.Xml.workspaceToDom(workspace);
      const xml = Blockly.Xml.domToText(dom);
      return xml;
    }

    function setWorkspaceState(state) {
      const dom = Blockly.utils.xml.textToDom(state);
      Blockly.Xml.domToWorkspace(dom, workspace);
    }

    if (lastState) setWorkspaceState(lastState);

    const supportedEvents = new Set([
      Blockly.Events.BLOCK_CHANGE,
      Blockly.Events.BLOCK_CREATE,
      Blockly.Events.BLOCK_DELETE,
      Blockly.Events.BLOCK_MOVE,
    ]);

    async function updateCode(event: any) {
      if (workspace.isDragging()) return; // Don't update while changes are happening.
      if (!supportedEvents.has(event.type)) return;

      const code = javascriptGenerator.workspaceToCode(workspace);
      const state = getWorkspaceState();
      console.log(code);

      window.localStorage.setItem("workspace", state);

      try {
        const result = await hatApi.updateSource(code);
        setCodeStatus({ updated: true });
      } catch (e: any) {
        const error = e as ApiError;
        console.error(
          `Failed to update source.\nSource:\n${code}\nError:\n${error.errors[0].description}`,
        );
        setCodeStatus({ updated: false });
      }
    }

    workspace.addChangeListener(updateCode);
  }

  function setCodeStatus(status: { updated: boolean; error?: string }) {
    const statusDiv = document.getElementById("codeStatus") as HTMLElement;
    const codeElem = statusDiv.querySelector("pre") as HTMLPreElement;

    if (status.updated) {
      statusDiv.classList.add("hidden");
      codeElem.innerText = "";
    } else {
      statusDiv.classList.remove("hidden");
      codeElem.innerText = status.error ?? "Invalid diagram";
    }
  }

  document.addEventListener("DOMContentLoaded", setup);
</script>

<style is:global>
  svg[display="none"] {
    display: none;
  }
</style>

<Layout title="Welcome to Astro.">
  <main>
    <div id="workspace" class="flex flex-row w-screen h-screen">
      <div
        id="codeStatus"
        class="absolute top-10 right-10 w-48 h-48 z-10 bg-red-400 rounded-lg hidden"
      >
        <div class="flex w-full h-full">
          <pre
            class="flex-1 text-gray-100 font-mono text-sm p-4 rounded-md whitespace-pre-wrap overflow-auto">
          </pre>
        </div>
      </div>
      <div class="w-full h-full flex flex-row">
        <div id="blocklyDiv" class="flex-1 grow-[1.5]"></div>
      </div>
    </div>
  </main>
</Layout>
