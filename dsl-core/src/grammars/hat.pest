WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
SINGLE_LINE_COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
BLOCK_COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
COMMENT = _{
    SINGLE_LINE_COMMENT |
    BLOCK_COMMENT
}

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

integer = @{ "_"? ~ ASCII_DIGIT+ }
decimal = @{ "_"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
string = @{ "\"" ~ ( "\"\"" | (!"\"" ~ ANY) )* ~ "\"" }

event_declaration = {
    "event" ~
    ident ~
    "{" ~
    event_parameters? ~
    "}"
}

event_parameter = {
    ident ~
    ":" ~
    type_keyword
}

event_parameters = {
    event_parameter ~
    ("," ~ event_parameter)* ~
    ","?
}

type_keyword = @{
    "bool"
}


automation_declaration = {
    "automation" ~
    (string | ident) ~
    "(" ~
    automation_triggers ~
    ")" ~
    "{" ~
    automation_conditions* ~
    automation_actions ~
    "}"
}

automation_triggers = {
    ident ~
    ("," ~ ident)*
}

automation_actions = {
    ("run" ~ echo_action)+
}

echo_action = {
    "echo" ~
    "(" ~
    string ~
    ")"
}

atom = {
    const_atom |
    function
}

const_atom = _{
    bool |
    string |
    decimal |
    integer
}

bool = @{
    "true" | "false"
}

function = {
    ident ~
    "(" ~
    function_parameters ~
    ")"
}

function_parameters = {
    (
        expr ~
        ("," ~ expr)*
    )?
}

bin_op = _{ add | subtract | multiply | divide }
add = { "+" }
subtract = { "-" }
multiply = { "*" }
divide = { "/" }

expr = { atom ~ (bin_op ~ atom)* }

automation_conditions = {
    "if" ~
    expr
}

stmt = _{ event_declaration | automation_declaration }

// Entry rule
program = _{ SOI ~ stmt* ~ stmt? ~ EOI }
